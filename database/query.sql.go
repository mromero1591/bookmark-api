// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createBookmark = `-- name: CreateBookmark :one
INSERT INTO bookmark (id, url, name, logo, category_id, user_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, url, name, logo, category_id, user_id, created_at, updated_at
`

type CreateBookmarkParams struct {
	ID         uuid.UUID
	Url        string
	Name       string
	Logo       sql.NullString
	CategoryID uuid.UUID
	UserID     uuid.UUID
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) CreateBookmark(ctx context.Context, arg CreateBookmarkParams) (Bookmark, error) {
	row := q.db.QueryRowContext(ctx, createBookmark,
		arg.ID,
		arg.Url,
		arg.Name,
		arg.Logo,
		arg.CategoryID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Name,
		&i.Logo,
		&i.CategoryID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO category (id, name, user_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5) RETURNING id, name, user_id, created_at, updated_at
`

type CreateCategoryParams struct {
	ID        uuid.UUID
	Name      string
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory,
		arg.ID,
		arg.Name,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserAccount = `-- name: CreateUserAccount :one
INSERT INTO user_accounts (id, email, name, pwd_hash, created_at, updated_at) 
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, email, name, pwd_hash, created_at, updated_at
`

type CreateUserAccountParams struct {
	ID        uuid.UUID
	Email     string
	Name      sql.NullString
	PwdHash   string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type CreateUserAccountRow struct {
	ID        uuid.UUID
	Email     string
	Name      sql.NullString
	PwdHash   string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (CreateUserAccountRow, error) {
	row := q.db.QueryRowContext(ctx, createUserAccount,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.PwdHash,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateUserAccountRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PwdHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBookmark = `-- name: DeleteBookmark :exec
DELETE FROM bookmark WHERE id = $1
`

func (q *Queries) DeleteBookmark(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBookmark, id)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM category WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const getBookmarkByUserID = `-- name: GetBookmarkByUserID :many
SELECT id, url, name, logo, category_id, user_id, created_at, updated_at FROM bookmark WHERE user_id = $1
`

func (q *Queries) GetBookmarkByUserID(ctx context.Context, userID uuid.UUID) ([]Bookmark, error) {
	rows, err := q.db.QueryContext(ctx, getBookmarkByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bookmark
	for rows.Next() {
		var i Bookmark
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Name,
			&i.Logo,
			&i.CategoryID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByUserID = `-- name: GetCategoryByUserID :many
SELECT id, name, user_id, created_at, updated_at FROM category WHERE user_id = $1
`

func (q *Queries) GetCategoryByUserID(ctx context.Context, userID uuid.UUID) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategoryByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAccountByEmail = `-- name: GetUserAccountByEmail :one
SELECT id,email, name,pwd_hash, created_at, updated_at FROM user_accounts WHERE email = $1
`

type GetUserAccountByEmailRow struct {
	ID        uuid.UUID
	Email     string
	Name      sql.NullString
	PwdHash   string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetUserAccountByEmail(ctx context.Context, email string) (GetUserAccountByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserAccountByEmail, email)
	var i GetUserAccountByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PwdHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
